generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  image             String?   // Keep profile image
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Custom fields for Telegram integration
  isAdmin           Boolean   @default(false)
  telegramId        String?   @unique // Telegram User ID (as string)
  telegramUsername  String?   // Telegram Username (@...)
  telegramFirstName String?   // Telegram First Name
  telegramLastName  String?   // Telegram Last Name
  telegramPhotoUrl  String?   // URL to Telegram profile photo

  // Relationships
  bids              Bid[]     // User can place multiple bids
  sessions          Session[] // User can have multiple sessions
}

// Session model for storing server-side sessions
model Session {
  id        String   @id @default(cuid()) // Primary key for the session record
  sessionId String   @unique // The secure, random ID stored in the cookie
  userId    String   // Foreign key linking to the User
  expiresAt DateTime // When the session expires
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])    // Index for efficiently finding user's sessions
  @@index([expiresAt]) // Index for cleaning up expired sessions
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PendingVerification {
  id                String    @id @default(cuid())
  verificationCode  String    @unique // The 6-char code shown to user
  expires           DateTime  // When the code expires
  channelId         String?   @unique // Unique ID for WebSocket communication channel
  isVerified        Boolean   @default(false) // Has the code been verified via Telegram?
  telegramId        String?   // Which Telegram user verified it?
  verifiedUserId    String?   // Which internal User ID it was linked to
  verificationToken String?   // REMOVED - Was used for old flow, maybe keep null for now
  createdAt         DateTime  @default(now())

  // No direct relation to User needed here anymore
  // verifiedUser User? @relation(fields: [verifiedUserId], references: [id])
  // @@index([verifiedUserId])
}

model Event {
  id          String    @id @default(cuid())
  name        String
  description String?
  location    String
  eventDate   DateTime
  endDate     DateTime // ADDED: The end date for all auctions in this event
  imageUrl    String?
  isActive    Boolean   @default(true)
  games       Game[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Game {
  id              String    @id @default(cuid())
  name            String
  description     String?
  system          String    // Make mandatory
  genre           String    // Make mandatory
  imageUrl        String?
  gameMaster      String?
  totalSeats      Int
  availableSeats  Int? // Can be derived, maybe remove if always totalSeats - winning bids
  startingPrice   Float     @default(40) // Default to 40 GEL
  minBidIncrement Float     @default(10) // Default to 10 GEL

  eventId         String
  event           Event     @relation(fields: [eventId], references: [id])

  bids            Bid[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([eventId])
}

model Bid {
  id          String    @id @default(cuid())
  amount      Float
  gameId      String
  userId      String // Now non-optional, linked to User
  createdAt   DateTime  @default(now())
  isWinning   Boolean   @default(false)
  notifiedAt  DateTime? // When winner notification was sent

  game        Game      @relation(fields: [gameId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@index([gameId])
  @@index([userId])
  @@index([isWinning])
}
